import{_ as s,o as n,c as a,a as e}from"./app.80a76440.js";const C=JSON.parse('{"title":"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers","description":"","frontmatter":{},"headers":[{"level":2,"title":"Problem Statement","slug":"problem-statement","link":"#problem-statement","children":[]},{"level":2,"title":"Solution:","slug":"solution","link":"#solution","children":[{"level":3,"title":"...","slug":"","link":"#","children":[]}]}],"relativePath":"solution/1601-1700/1689 - Partitioning Into Minimum Number Of Deci-Binary Numbers.md","lastUpdated":1677958804000}'),l={name:"solution/1601-1700/1689 - Partitioning Into Minimum Number Of Deci-Binary Numbers.md"},o=e(`<h1 id="_1689-partitioning-into-minimum-number-of-deci-binary-numbers" tabindex="-1">1689. Partitioning Into Minimum Number Of Deci-Binary Numbers <a href="https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/" target="_blank" rel="noreferrer"><img src="https://graph.org/file/3ea5234dda646b71c574a.png" alt="share"></a> <a class="header-anchor" href="#_1689-partitioning-into-minimum-number-of-deci-binary-numbers" aria-hidden="true">#</a></h1><p><img src="https://img.shields.io/badge/Difficulty-Medium-yellow.svg" alt=""></p><h2 id="problem-statement" tabindex="-1">Problem Statement <a class="header-anchor" href="#problem-statement" aria-hidden="true">#</a></h2><p>A decimal number is called <strong>deci-binary</strong> if each of its digits is either <code>0</code> or <code>1</code> without any leading zeros. For example, <code>101</code> and <code>1100</code> are <strong>deci-binary</strong>, while <code>112</code> and <code>3001</code> are not.</p><p>Given a string <code>n</code> that represents a positive decimal integer, return <em>the <strong>minimum</strong> number of positive <strong>deci-binary</strong> numbers needed so that they sum up to </em><code>n</code><em>.</em></p><p> </p><p><strong class="example">Example 1:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Input: n = &quot;32&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Output: 3</span></span>
<span class="line"><span style="color:#A6ACCD;">Explanation: 10 + 11 + 11 = 32</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong class="example">Example 2:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Input: n = &quot;82734&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Output: 8</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong class="example">Example 3:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Input: n = &quot;27346209830709182346&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Output: 9</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n.length &lt;= 10<sup>5</sup></code></li><li><code>n</code> consists of only digits.</li><li><code>n</code> does not contain any leading zeros and represents a positive integer.</li></ul><details class="details custom-block"><summary><em>Click to open Hints</em></summary><ul><li>Think about if the input was only one digit. Then you need to add up as many ones as the value of this digit.</li><li>If the input has multiple digits, then you can solve for each digit independently, and merge the answers to form numbers that add up to that input.</li><li>Thus the answer is equal to the max digit.</li></ul></details><h2 id="solution" tabindex="-1">Solution: <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-S-I4a" id="tab-6VpcWUQ" checked="checked"><label for="tab-6VpcWUQ">Rust</label></div><div class="blocks"><div class="language-rs active"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">min_partitions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // this will be slightly faster as it doesn&#39;t need to convert the char to a digit</span></span>
<span class="line"><span style="color:#676E95;">        // as the max() function will return the max char value (in ASCII) which is the same as the max digit value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">        // n.chars().max().unwrap().to_digit(10).unwrap() as i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        n</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">chars</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to_digit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></div></div><h3 id="" tabindex="-1"><a href="#"><em>...</em></a> <a class="header-anchor" href="#" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,20),t=[o];function p(i,r,c,d,u,m){return n(),a("div",null,t)}const h=s(l,[["render",p]]);export{C as __pageData,h as default};
