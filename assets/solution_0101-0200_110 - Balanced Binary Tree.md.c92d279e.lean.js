import{_ as s,c as a,o as n,a as l}from"./app.1f139115.js";const F=JSON.parse('{"title":"110. Balanced Binary Tree","description":"","frontmatter":{},"headers":[{"level":2,"title":"Problem Statement:","slug":"problem-statement","link":"#problem-statement","children":[{"level":3,"title":"Example 1:","slug":"example-1","link":"#example-1","children":[]},{"level":3,"title":"Example 2:","slug":"example-2","link":"#example-2","children":[]},{"level":3,"title":"Example 3:","slug":"example-3","link":"#example-3","children":[]},{"level":3,"title":"Constraints:","slug":"constraints","link":"#constraints","children":[]}]},{"level":2,"title":"Solution:","slug":"solution","link":"#solution","children":[{"level":3,"title":"...","slug":"","link":"#","children":[]}]}],"relativePath":"solution/0101-0200/110 - Balanced Binary Tree.md","lastUpdated":1671291107000}'),e={name:"solution/0101-0200/110 - Balanced Binary Tree.md"},p=l("",18),o=[p];function t(r,c,i,D,y,C){return n(),a("div",null,o)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
